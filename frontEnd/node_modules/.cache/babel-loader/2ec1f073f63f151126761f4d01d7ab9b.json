{"ast":null,"code":"import axios from 'axios'; // import QS from 'qs';\n\nimport { message } from 'antd';\nconst service = axios.create({\n  baseURL: 'http://192.168.1.3:9011',\n  timeout: 5000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}); // Add a request interceptor\n\nservice.interceptors.request.use(config => {\n  // before request is sent\n  // const token = window.localStorage.getItem('userToken') || window.sessionStorage.getItem('userToken');\n  // config.data = Object.assign({}, config.data, {\n  //   token: token,\n  // });\n  // // config.headers = {\n  // //   'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n  // // }\n  console.log('config____', config);\n  config.data = JSON.stringify(config.data);\n  console.log('config', config);\n  return config;\n}, error => {\n  // request error\n  return Promise.reject(error); // return error;\n});\nservice.interceptors.response.use(response => {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  if (response.code) {\n    switch (response.code) {\n      case 200:\n        return response.data;\n\n      case 401:\n        //未登录处理方法\n        break;\n\n      case 403:\n        //token过期处理方法\n        break;\n\n      default:\n        message.error(response.data.msg);\n    }\n  } else {\n    return response;\n  }\n}, error => {\n  return Promise.reject(error);\n}); //最后把封装好的axios导出\n\nexport default service;","map":{"version":3,"sources":["C:/Users/zhang/ECE651/frontend/src/request/index.js"],"names":["axios","message","service","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","data","JSON","stringify","error","Promise","reject","response","code","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,yBADkB;AAE3BC,EAAAA,OAAO,EAAE,IAFkB;AAG3BC,EAAAA,OAAO,EAAC;AAAC,oBAAe;AAAhB;AAHmB,CAAb,CAAhB,C,CAMA;;AAEAJ,OAAO,CAACK,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,MAAM,IAAI;AAEzC;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B;AAEAA,EAAAA,MAAM,CAACG,IAAP,GAAcC,IAAI,CAACC,SAAL,CAAeL,MAAM,CAACG,IAAtB,CAAd;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AAEA,SAAOA,MAAP;AACD,CApBD,EAoBGM,KAAK,IAAI;AAEV;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CAHU,CAIV;AACD,CAzBD;AA6BAd,OAAO,CAACK,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,CAAkCU,QAAQ,IAAI;AAE5C;AACA;AACA,MAAIA,QAAQ,CAACC,IAAb,EAAmB;AACjB,YAAQD,QAAQ,CAACC,IAAjB;AACE,WAAK,GAAL;AACE,eAAOD,QAAQ,CAACN,IAAhB;;AACF,WAAK,GAAL;AACE;AACA;;AACF,WAAK,GAAL;AACE;AACA;;AACF;AACEZ,QAAAA,OAAO,CAACe,KAAR,CAAcG,QAAQ,CAACN,IAAT,CAAcQ,GAA5B;AAVJ;AAYD,GAbD,MAaO;AACL,WAAOF,QAAP;AACD;AACF,CApBD,EAoBGH,KAAK,IAAI;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAtBD,E,CAuBA;;AACA,eAAed,OAAf","sourcesContent":["import axios from 'axios';\r\n// import QS from 'qs';\r\nimport { message } from 'antd'\r\n\r\nconst service = axios.create({\r\n  baseURL: 'http://192.168.1.3:9011',\r\n  timeout: 5000,\r\n  headers:{\"Content-Type\":\"application/json\"},\r\n});\r\n\r\n// Add a request interceptor\r\n\r\nservice.interceptors.request.use(config => {\r\n\r\n  // before request is sent\r\n  // const token = window.localStorage.getItem('userToken') || window.sessionStorage.getItem('userToken');\r\n\r\n  // config.data = Object.assign({}, config.data, {\r\n  //   token: token,\r\n  // });\r\n\r\n  // // config.headers = {\r\n  // //   'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\r\n  // // }\r\n\r\n  console.log('config____', config)\r\n\r\n  config.data = JSON.stringify(config.data);\r\n\r\n  console.log('config', config)\r\n  \r\n  return config;\r\n}, error => {\r\n\r\n  // request error\r\n  return Promise.reject(error);\r\n  // return error;\r\n});\r\n\r\n\r\n\r\nservice.interceptors.response.use(response => {\r\n\r\n  // Any status code that lie within the range of 2xx cause this function to trigger\r\n  // Do something with response data\r\n  if (response.code) {\r\n    switch (response.code) {\r\n      case 200:\r\n        return response.data;\r\n      case 401:\r\n        //未登录处理方法\r\n        break;\r\n      case 403:\r\n        //token过期处理方法\r\n        break;\r\n      default:\r\n        message.error(response.data.msg)\r\n    }\r\n  } else { \r\n    return response;\r\n  }\r\n}, error => {\r\n  return Promise.reject(error);\r\n})\r\n//最后把封装好的axios导出\r\nexport default service"]},"metadata":{},"sourceType":"module"}